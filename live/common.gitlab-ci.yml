include:
  - project: "cloud-city/platform/gitlab-templates"
    ref: HEAD
    file:
      - "templates/cache-test.gitlab-ci.yml"
      - "templates/iac.gitlab-ci.yml"

# default:
#   tags:
#     - runner-testing # NB: uncomment to run a build on the test runner.

variables:
  TG_IAM_ASSUME_ROLE: arn:aws:iam::381492150796:role/terragrunter

stages:
  - validate
  - test
  - plan
  - destroy
  - apply

dast:
  stage: test

#### templates

.common_terraform_modules:
  before_script:
    - cp /etc/gitlab-runner/certs/gitlab.cloud-city.crt /usr/local/share/ca-certificates/
    - update-ca-certificates
    - git -c http.sslVerify=false clone https://gitlab-ci-token:$CI_JOB_TOKEN@gitlab.cloud-city/cloud-city/platform/iac/modules ../modules --depth 1
    - export TERRA_UNIT_DIR=$(echo "$TERRA_GROUP_NAME" | sed 's|\.|/|g') # turning '.' into '/'
    - echo $TERRA_UNIT_DIR

# https://docs.gitlab.com/ee/ci/yaml/artifacts_reports.html#artifactsreportsterraform
.publish_plan_terragrunt_units:
  stage: plan
  variables:
    PLAN_REPORT: tfplan.json
  image:
    name: $PYTHON_IMAGE
  script:
    - find $CI_PROJECT_DIR -wholename 'tfplan.json' # -printf '%p '
    - python _scripts/check_plan.py --directory "$CI_PROJECT_DIR" --output "$CI_PROJECT_DIR/$PLAN_REPORT"
  artifacts:
    name: tfplan_json
    paths:
      - $PLAN_REPORT
    expire_in: "8 hrs"
    reports:
      terraform: $PLAN_REPORT
  allow_failure: true

.apply_terragrunt_units:
  stage: apply
  when: manual
  variables:
    ACTION: apply -auto-approve
